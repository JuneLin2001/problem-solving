"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9421],{5878:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>g,frontMatter:()=>d,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"LeetCode/Check if One String Swap Can Make Strings Equal/README","title":"1790. Check if One String Swap Can Make Strings Equal","description":"You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices. Return true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false.","source":"@site/docs/LeetCode/1790. Check if One String Swap Can Make Strings Equal/README.mdx","sourceDirName":"LeetCode/1790. Check if One String Swap Can Make Strings Equal","slug":"/LeetCode/Check if One String Swap Can Make Strings Equal/","permalink":"/problem-solving/LeetCode/Check if One String Swap Can Make Strings Equal/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Yen-Chun Lin","lastUpdatedAt":1759305873000,"frontMatter":{"title":"1790. Check if One String Swap Can Make Strings Equal","description":"You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices. Return true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false.","keywords":["LeetCode","1790. Check if One String Swap Can Make Strings Equal","Easy","Hash Table","String","Counting"]},"sidebar":"tutorialSidebar","previous":{"title":"1752. Check if Array Is Sorted and Rotated","permalink":"/problem-solving/LeetCode/Check if Array Is Sorted and Rotated/"},"next":{"title":"1800. Maximum Ascending Subarray Sum","permalink":"/problem-solving/LeetCode/Maximum Ascending Subarray Sum/"}}');var a=t(4848),i=t(8453),r=t(1470),o=t(9365),l=t(2693);const d={title:"1790. Check if One String Swap Can Make Strings Equal",description:"You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices. Return true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false.",keywords:["LeetCode","1790. Check if One String Swap Can Make Strings Equal","Easy","Hash Table","String","Counting"]},c="frontMatter.title",h={},u=[{value:"Description",id:"description",level:2},{value:"Example 1:",id:"example-1",level:4},{value:"Example 2:",id:"example-2",level:4},{value:"Example 3:",id:"example-3",level:4},{value:"Constraints:",id:"constraints",level:4},{value:"Solution",id:"solution",level:2},{value:"\u89e3\u984c\u601d\u8def",id:"\u89e3\u984c\u601d\u8def",level:2},{value:"\u5fc3\u5f97",id:"\u5fc3\u5f97",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"frontmattertitle",children:(0,a.jsx)(n.a,{href:"https://leetcode.com/problems/check-if-one-string-swap-can-make-strings-equal",children:d.title})})}),"\n","\n",(0,a.jsx)(l.A,{difficulty:"Easy"}),"\n",(0,a.jsxs)(r.A,{children:[(0,a.jsxs)(o.A,{value:"description",label:"\u984c\u76ee\u63cf\u8ff0",default:!0,children:[(0,a.jsx)(n.h2,{id:"description",children:"Description"}),(0,a.jsx)(n.p,{children:"You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.\nReturn true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false."}),(0,a.jsx)(n.h4,{id:"example-1",children:"Example 1:"}),(0,a.jsx)(n.p,{children:'Input: s1 = "bank", s2 = "kanb"\nOutput: true\nExplanation: For example, swap the first character with the last character of s2 to make "bank".'}),(0,a.jsx)(n.h4,{id:"example-2",children:"Example 2:"}),(0,a.jsx)(n.p,{children:'Input: s1 = "attack", s2 = "defend"\nOutput: false\nExplanation: It is impossible to make them equal with one string swap.'}),(0,a.jsx)(n.h4,{id:"example-3",children:"Example 3:"}),(0,a.jsx)(n.p,{children:'Input: s1 = "kelb", s2 = "kelb"\nOutput: true\nExplanation: The two strings are already equal, so no string swap operation is required.'}),(0,a.jsx)(n.h4,{id:"constraints",children:"Constraints:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"1 <= s1.length, s2.length <= 100\ns1.length == s2.length\ns1 and s2 consist of only lowercase English letters.\n"})}),(0,a.jsx)(n.p,{children:"Follow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k >= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?"})]}),(0,a.jsxs)(o.A,{value:"solution",label:"\u89e3\u7b54",children:[(0,a.jsx)(n.h2,{id:"solution",children:"Solution"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar areAlmostEqual = function (s1, s2) {\n  const arr = [];\n\n  for (let i = 0; i < s1.length; i++) {\n    if (s1[i] !== s2[i]) {\n      arr.push(i);\n    }\n  }\n\n  if (arr.length === 2) {\n    return s1[arr[0]] === s2[arr[1]] && s1[arr[1]] === s2[arr[0]];\n  }\n\n  return arr.length === 0;\n};\n"})})]})]}),"\n",(0,a.jsx)(n.h2,{id:"\u89e3\u984c\u601d\u8def",children:"\u89e3\u984c\u601d\u8def"}),"\n",(0,a.jsx)(n.p,{children:"\u56e0\u70ba\u5169\u500b\u5b57\u4e32\u4e00\u6a23\u9577\u6240\u4ee5\u53ef\u4ee5\u5beb\u5728\u540c\u500b for \u8ff4\u5708\u88e1\u9762\uff0c\u5148\u662f\u66b4\u529b\u904d\u6b77\u9663\u5217\u627e\u51fa\u5169\u500b\u5b57\u4e32\u7684\u5dee\u7570\u662f\u5728\u7b2c i \u500b\u4f4d\u7f6e\u4e26\u8a18\u9304\u5230 arr\uff0c\u5982\u679c arr \u7b49\u65bc 2 \u7684\u8a71\u5c31\u6bd4\u8f03\u5169\u500b\u5b57\u4e32\u7684\u90a3\u5169\u500b\u4ea4\u63db\u4f4d\u7f6e\u4e4b\u5f8c\u662f\u4e0d\u662f\u76f8\u7b49\uff0c\u662f\u7684\u8a71\u5c31 true\u3002\u9084\u6709\u500b\u72c0\u6cc1\u662f\u5169\u500b\u5b57\u4e32\u4e00\u958b\u59cb\u5c31\u4e00\u6a23\u6240\u4ee5 arr \u6703\u662f 0\uff0c\u9019\u6a23\u76f4\u63a5\u56de\u50b3 true \u5c31\u597d\u3002arr \u9577\u5ea6\u9664\u4e86 2 \u548c 0 \u4ee5\u5916\u5c31\u90fd\u662f false"}),"\n",(0,a.jsx)(n.h2,{id:"\u5fc3\u5f97",children:"\u5fc3\u5f97"}),"\n",(0,a.jsx)(n.p,{children:"\u539f\u672c\u60f3\u7528 Set \u7684\u8cc7\u6599\u7d50\u69cb\u4f46\u767c\u73fe\u4e00\u822c\u7684\u9663\u5217 array \u5c31\u5920\u4e86"})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},2693:(e,n,t)=>{t.d(n,{A:()=>i});t(6540);var s=t(7293),a=t(4848);const i=({difficulty:e,kyu:n})=>{let t=e;n&&(n>=5&&n<=8?t="Easy":n>=3&&n<=4?t="Medium":n>=1&&n<=2&&(t="Hard"));const i=t?{Easy:"tip",Medium:"warning",Hard:"danger"}[t]:"tip",r=t?n?`${n} kyu`:t:"";return(0,a.jsx)(s.A,{type:i,icon:null,title:r,children:(0,a.jsx)(a.Fragment,{})})}}}]);