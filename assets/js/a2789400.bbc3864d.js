"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8152],{5739:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>x,contentTitle:()=>b,default:()=>w,frontMatter:()=>g,metadata:()=>s,toc:()=>f});const s=JSON.parse('{"id":"LeetCode/Is Subsequence/README","title":"392. Is Subsequence","description":"Given two strings s and t, return true if s is a subsequence of t, or false otherwise.","source":"@site/docs/LeetCode/392. Is Subsequence/README.mdx","sourceDirName":"LeetCode/392. Is Subsequence","slug":"/LeetCode/Is Subsequence/","permalink":"/problem-solving/LeetCode/Is Subsequence/","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"LeetCode","permalink":"/problem-solving/tags/leet-code"},{"inline":true,"label":"Easy","permalink":"/problem-solving/tags/easy"},{"inline":true,"label":"Two Pointers","permalink":"/problem-solving/tags/two-pointers"},{"inline":true,"label":"String","permalink":"/problem-solving/tags/string"},{"inline":true,"label":"Dynamic Programming","permalink":"/problem-solving/tags/dynamic-programming"}],"version":"current","lastUpdatedBy":"Yen-Chun,Lin","lastUpdatedAt":1761234415000,"frontMatter":{"title":"392. Is Subsequence","description":"Given two strings s and t, return true if s is a subsequence of t, or false otherwise.","keywords":["LeetCode","392. Is Subsequence","Easy","Two Pointers","String","Dynamic Programming"],"tags":["LeetCode","Easy","Two Pointers","String","Dynamic Programming"]},"sidebar":"tutorialSidebar","previous":{"title":"383. Ransom Note","permalink":"/problem-solving/LeetCode/Ransom Note/"},"next":{"title":"509. Fibonacci Number","permalink":"/problem-solving/LeetCode/Fibonacci Number/"}}');var r=t(4848),i=t(8453),o=t(1470),l=t(9365),a=t(3457),c=t(2693);const u="/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isSubsequence = function (s, t) {\n  let pointerS = 0;\n  let pointerT = 0;\n\n  if (s.length === 0) return true;\n\n  while (pointerT <= t.length) {\n    if (s[pointerS] === t[pointerT]) {\n      pointerS++;\n    }\n    if (pointerS >= s.length) {\n      return true;\n    }\n    pointerT++;\n  }\n  return false;\n};\n";function d(e){const n={p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Given two strings s and t, return true if s is a subsequence of t, or false otherwise."}),"\n",(0,r.jsx)(n.p,{children:'A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).'}),"\n",(0,r.jsx)(n.p,{children:"Follow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k >= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?"})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}function h(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h4,{id:"example-1",children:"Example 1:"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Input:"}),' s = "abc", t = "ahbgdc"\n',(0,r.jsx)(n.strong,{children:"Output:"})," true"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-2",children:"Example 2:"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Input:"}),' s = "axc", t = "ahbgdc"\n',(0,r.jsx)(n.strong,{children:"Output:"})," false"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"constraints",children:"Constraints:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"0 <= s.length <= 100\n0 <= t.length <= 104\ns and t consist only of lowercase English letters.\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}const g={title:"392. Is Subsequence",description:"Given two strings s and t, return true if s is a subsequence of t, or false otherwise.",keywords:["LeetCode","392. Is Subsequence","Easy","Two Pointers","String","Dynamic Programming"],tags:["LeetCode","Easy","Two Pointers","String","Dynamic Programming"]},b="frontMatter.title",x={},f=[{value:"Example 1:",id:"example-1",level:4},{value:"Example 2:",id:"example-2",level:4},{value:"Constraints:",id:"constraints",level:2},{value:"Solution",id:"solution",level:2},{value:"\u89e3\u984c\u601d\u8def",id:"\u89e3\u984c\u601d\u8def",level:2},{value:"\u5fc3\u5f97",id:"\u5fc3\u5f97",level:2}];function j(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",p:"p",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"frontmattertitle",children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/intersection-of-two-arrays/",children:g.title})})}),"\n","\n",(0,r.jsx)(c.A,{difficulty:"Easy"}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsx)(l.A,{value:"description",label:"\u984c\u76ee\u63cf\u8ff0",default:!0,children:(0,r.jsxs)(t,{open:!0,children:[(0,r.jsx)("summary",{children:"Description"}),(0,r.jsx)(p,{}),(0,r.jsx)(m,{})]})}),(0,r.jsxs)(l.A,{value:"solution",label:"\u89e3\u7b54",children:[(0,r.jsx)(n.h2,{id:"solution",children:"Solution"}),(0,r.jsx)(a.A,{language:"js",children:u})]})]}),"\n",(0,r.jsx)(n.h2,{id:"\u89e3\u984c\u601d\u8def",children:"\u89e3\u984c\u601d\u8def"}),"\n",(0,r.jsx)(n.p,{children:"\u5148\u662f\u5b9a\u7fa9\u5169\u500b Pointer\uff0c\u518d\u7528\u5176\u5224\u65b7\u5b57\u4e32\u7684\u662f\u5426\u70ba Subsequence"}),"\n",(0,r.jsx)(n.h2,{id:"\u5fc3\u5f97",children:"\u5fc3\u5f97"}),"\n",(0,r.jsxs)(n.p,{children:["\u770b\u4e86 ",(0,r.jsx)(n.a,{href:"https://www.udemy.com/course/algorithm-data-structure",children:"Wilson Ren \u7684 \u8cc7\u6599\u7d50\u69cb\u8207\u6f14\u7b97\u6cd5 (JavaScript)"})," \u4ecb\u7d39\u9019\u984c\u7d93\u5178\u984c\uff0c\u5c31\u99ac\u4e0a\u7528 Two Pointer \u505a\u6cd5\u4f86\u8a66\u8a66\u770b"]})]})}function w(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(j,{...e})}):j(e)}},2693:(e,n,t)=>{t.d(n,{A:()=>i});t(6540);var s=t(7293),r=t(4848);const i=({difficulty:e,kyu:n})=>{let t=e;n&&(n>=5&&n<=8?t="Easy":n>=3&&n<=4?t="Medium":n>=1&&n<=2&&(t="Hard"));const i=t?{Easy:"tip",Medium:"warning",Hard:"danger"}[t]:"tip",o=t?n?`${n} kyu`:t:"";return(0,r.jsx)(s.A,{type:i,icon:null,title:o,children:(0,r.jsx)(r.Fragment,{})})}}}]);