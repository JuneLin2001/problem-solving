"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[254],{4004:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>g,contentTitle:()=>x,default:()=>X,frontMatter:()=>f,metadata:()=>i,toc:()=>j});const i=JSON.parse('{"id":"LeetCode/Final Value of Variable After Performing Operations/README","title":"2011. Final Value of Variable After Performing Operations","description":"There is a programming language with only four operations and one variable X. Given an array of strings operations containing a list of operations, return the final value of X after performing all the operations.","source":"@site/docs/LeetCode/2011. Final Value of Variable After Performing Operations/README.mdx","sourceDirName":"LeetCode/2011. Final Value of Variable After Performing Operations","slug":"/LeetCode/Final Value of Variable After Performing Operations/","permalink":"/problem-solving/LeetCode/Final Value of Variable After Performing Operations/","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"LeetCode","permalink":"/problem-solving/tags/leet-code"},{"inline":true,"label":"Easy","permalink":"/problem-solving/tags/easy"},{"inline":true,"label":"Array","permalink":"/problem-solving/tags/array"},{"inline":true,"label":"String","permalink":"/problem-solving/tags/string"},{"inline":true,"label":"Simulation","permalink":"/problem-solving/tags/simulation"}],"version":"current","lastUpdatedBy":"Yen-Chun Lin","lastUpdatedAt":1760954536000,"frontMatter":{"title":"2011. Final Value of Variable After Performing Operations","description":"There is a programming language with only four operations and one variable X. Given an array of strings operations containing a list of operations, return the final value of X after performing all the operations.","keywords":["LeetCode","2011. Final Value of Variable After Performing Operations","Easy","Array","String","Simulation"],"tags":["LeetCode","Easy","Array","String","Simulation"]},"sidebar":"tutorialSidebar","previous":{"title":"1800. Maximum Ascending Subarray Sum","permalink":"/problem-solving/LeetCode/Maximum Ascending Subarray Sum/"},"next":{"title":"2221. Find Triangular Sum of an Array","permalink":"/problem-solving/LeetCode/Find Triangular Sum of an Array/"}}');var l=r(4848),a=r(8453),t=r(1470),o=r(9365),s=r(3457),d=r(2693);const c='/**\n * @param {string[]} operations\n * @return {number}\n */\nvar finalValueAfterOperations = function (operations) {\n  let result = 0;\n\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i].includes("+")) {\n      result++;\n    } else {\n      result--;\n    }\n  }\n\n  return result;\n};\n';function p(e){const n={code:"code",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.p,{children:"There is a programming language with only four operations and one variable X:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"++X"})," and ",(0,l.jsx)(n.code,{children:"X++"})," increments the value of the variable X by 1."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--X"})," and ",(0,l.jsx)(n.code,{children:"X--"})," decrements the value of the variable X by 1.\nInitially, the value of X is 0."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Given an array of strings operations containing a list of operations, return the final value of X after performing all the operations."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(p,{...e})}):p(e)}function h(e){const n={blockquote:"blockquote",br:"br",code:"code",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h4,{id:"example-1",children:"Example 1:"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Input:"}),' operations = ["--X","X++","X++"]',(0,l.jsx)(n.br,{}),"\n",(0,l.jsx)(n.strong,{children:"Output:"})," 1",(0,l.jsx)(n.br,{}),"\n",(0,l.jsx)(n.strong,{children:"Explanation:"})]}),"\n",(0,l.jsx)(n.p,{children:"The operations are performed as follows:\nInitially, X = 0.\n--X: X is decremented by 1, X = 0 - 1 = -1.\nX++: X is incremented by 1, X = -1 + 1 = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"example-2",children:"Example 2:"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Input:"}),' nums = ["++X","++X","X++"]',(0,l.jsx)(n.br,{}),"\n",(0,l.jsx)(n.strong,{children:"Output:"})," 3\n",(0,l.jsx)(n.strong,{children:"Explanation:"})]}),"\n",(0,l.jsx)(n.p,{children:"The operations are performed as follows:\nInitially, X = 0.\n++X: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\nX++: X is incremented by 1, X = 2 + 1 = 3."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"example-3",children:"Example 3:"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Input:"}),' nums = ["X++","++X","--X","X--"]',(0,l.jsx)(n.br,{}),"\n",(0,l.jsx)(n.strong,{children:"Output:"})," 0\n",(0,l.jsx)(n.strong,{children:"Explanation:"})]}),"\n",(0,l.jsx)(n.p,{children:"The operations are performed as follows:\nInitially, X = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\n--X: X is decremented by 1, X = 2 - 1 = 1.\nX--: X is decremented by 1, X = 1 - 1 = 0."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"constraints",children:"Constraints:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"1 <= operations.length <= 100"})}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"operations[i]"})," will be either ",(0,l.jsx)(n.code,{children:'"++X"'}),", ",(0,l.jsx)(n.code,{children:'"X++"'}),", ",(0,l.jsx)(n.code,{children:'"--X"'}),", or ",(0,l.jsx)(n.code,{children:'"X--"'}),"."]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}const f={title:"2011. Final Value of Variable After Performing Operations",description:"There is a programming language with only four operations and one variable X. Given an array of strings operations containing a list of operations, return the final value of X after performing all the operations.",keywords:["LeetCode","2011. Final Value of Variable After Performing Operations","Easy","Array","String","Simulation"],tags:["LeetCode","Easy","Array","String","Simulation"]},x="frontMatter.title",g={},j=[{value:"Example 1:",id:"example-1",level:4},{value:"Example 2:",id:"example-2",level:4},{value:"Example 3:",id:"example-3",level:4},{value:"Constraints:",id:"constraints",level:4},{value:"Solution",id:"solution",level:2},{value:"\u89e3\u984c\u601d\u8def",id:"\u89e3\u984c\u601d\u8def",level:3},{value:"\u5fc3\u5f97",id:"\u5fc3\u5f97",level:3}];function b(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,a.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"frontmattertitle",children:(0,l.jsx)(n.a,{href:"https://leetcode.com/problems/final-value-of-variable-after-performing-operations/",children:f.title})})}),"\n","\n",(0,l.jsx)(d.A,{difficulty:"Easy"}),"\n",(0,l.jsxs)(t.A,{children:[(0,l.jsx)(o.A,{value:"description",label:"\u984c\u76ee\u63cf\u8ff0",default:!0,children:(0,l.jsxs)(r,{open:!0,children:[(0,l.jsx)("summary",{children:"Description"}),(0,l.jsx)(u,{}),(0,l.jsx)(m,{})]})}),(0,l.jsxs)(o.A,{value:"solution",label:"\u89e3\u7b54",children:[(0,l.jsx)(n.h2,{id:"solution",children:"Solution"}),(0,l.jsx)(s.A,{language:"js",children:c})]})]}),"\n",(0,l.jsx)(n.h3,{id:"\u89e3\u984c\u601d\u8def",children:"\u89e3\u984c\u601d\u8def"}),"\n",(0,l.jsxs)(n.p,{children:["\u56e0\u70ba\u53ea\u6703\u6709 ",(0,l.jsx)(n.code,{children:'"++X"'}),", ",(0,l.jsx)(n.code,{children:'"X++"'}),", ",(0,l.jsx)(n.code,{children:'"--X"'}),", ",(0,l.jsx)(n.code,{children:'"X--"'})," \u56db\u7a2e\u72c0\u6cc1\uff0c\u6240\u4ee5\u53ef\u4ee5\u7c21\u55ae\u4f7f\u7528 ",(0,l.jsx)(n.code,{children:".includes()"})," \u4f86\u5224\u65b7\u662f\u52a0\u6216\u6e1b\u3002"]}),"\n",(0,l.jsx)(n.h3,{id:"\u5fc3\u5f97",children:"\u5fc3\u5f97"}),"\n",(0,l.jsx)(n.p,{children:"\u6eff\u76f4\u89c0\u7c21\u55ae\u7684\u984c\u76ee\uff01"})]})}function X(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(b,{...e})}):b(e)}}}]);