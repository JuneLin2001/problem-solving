"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8575],{7141:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>u,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"LeetCode/Count Number of Bad Pairs/README","title":"2364. Count Number of Bad Pairs","description":"You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i]. Return the total number of bad pairs in nums.","source":"@site/docs/LeetCode/2364. Count Number of Bad Pairs/README.mdx","sourceDirName":"LeetCode/2364. Count Number of Bad Pairs","slug":"/LeetCode/Count Number of Bad Pairs/","permalink":"/problem-solving/LeetCode/Count Number of Bad Pairs/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Yen-Chun Lin","lastUpdatedAt":1759305873000,"frontMatter":{"title":"2364. Count Number of Bad Pairs","description":"You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i]. Return the total number of bad pairs in nums.","keywords":["LeetCode","2364. Count Number of Bad Pairs","Medium","Array","Hash Table","Math","Counting"]},"sidebar":"tutorialSidebar","previous":{"title":"2300. Successful Pairs of Spells and Potions","permalink":"/problem-solving/LeetCode/Successful Pairs of Spells and Potions/"},"next":{"title":"2579. Count Total Number of Colored Cells","permalink":"/problem-solving/LeetCode/Count Total Number of Colored Cells/"}}');var r=i(4848),s=i(8453),t=i(1470),d=i(9365),l=i(2693);const o={title:"2364. Count Number of Bad Pairs",description:"You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i]. Return the total number of bad pairs in nums.",keywords:["LeetCode","2364. Count Number of Bad Pairs","Medium","Array","Hash Table","Math","Counting"]},u="frontMatter.title",p={},c=[{value:"Description",id:"description",level:2},{value:"Example 1:",id:"example-1",level:4},{value:"Example 2:",id:"example-2",level:4},{value:"Constraints:",id:"constraints",level:2},{value:"Solution",id:"solution",level:2},{value:"\u89e3\u984c\u601d\u8def",id:"\u89e3\u984c\u601d\u8def",level:2},{value:"\u5fc3\u5f97",id:"\u5fc3\u5f97",level:2}];function h(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"frontmattertitle",children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/count-number-of-bad-pairs/",children:o.title})})}),"\n","\n",(0,r.jsx)(l.A,{difficulty:"Medium"}),"\n",(0,r.jsxs)(t.A,{children:[(0,r.jsxs)(d.A,{value:"description",label:"\u984c\u76ee\u63cf\u8ff0",default:!0,children:[(0,r.jsx)(n.h2,{id:"description",children:"Description"}),(0,r.jsx)(n.p,{children:"You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i]."}),(0,r.jsx)(n.p,{children:"Return the total number of bad pairs in nums."}),(0,r.jsx)(n.h4,{id:"example-1",children:"Example 1:"}),(0,r.jsxs)(n.p,{children:["Input: nums = [4,1,3,3]",(0,r.jsx)(n.br,{}),"\n","Output: 5",(0,r.jsx)(n.br,{}),"\n","Explanation: The pair (0, 1) is a bad pair since 1 - 0 != 1 - 4.",(0,r.jsx)(n.br,{}),"\n","The pair (0, 2) is a bad pair since 2 - 0 != 3 - 4, 2 != -1.",(0,r.jsx)(n.br,{}),"\n","The pair (0, 3) is a bad pair since 3 - 0 != 3 - 4, 3 != -1.",(0,r.jsx)(n.br,{}),"\n","The pair (1, 2) is a bad pair since 2 - 1 != 3 - 1, 1 != 2.",(0,r.jsx)(n.br,{}),"\n","The pair (2, 3) is a bad pair since 3 - 2 != 3 - 3, 1 != 0.",(0,r.jsx)(n.br,{}),"\n","There are a total of 5 bad pairs, so we return 5."]}),(0,r.jsx)(n.h4,{id:"example-2",children:"Example 2:"}),(0,r.jsxs)(n.p,{children:["Input: nums = [1,2,3,4,5]",(0,r.jsx)(n.br,{}),"\n","Output: 0",(0,r.jsx)(n.br,{}),"\n","Explanation: There are no bad pairs."]}),(0,r.jsx)(n.h2,{id:"constraints",children:"Constraints:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"1 <= nums.length <= 105\n1 <= nums.length <= 105\n"})})]}),(0,r.jsxs)(d.A,{value:"solution",label:"\u89e3\u7b54",children:[(0,r.jsx)(n.h2,{id:"solution",children:"Solution"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countBadPairs = function (nums) {\n  let arrLength = nums.length;\n  let goodPairs = 0;\n  let totalPairs = (arrLength * (arrLength - 1)) / 2;\n  let HashMap = new Map();\n\n  for (let i = 0; i < arrLength; i++) {\n    let diff = i - nums[i];\n    if (HashMap.has(diff)) {\n      goodPairs += HashMap.get(diff);\n      HashMap.set(diff, HashMap.get(diff) + 1);\n    } else {\n      HashMap.set(diff, 1);\n    }\n  }\n\n  return totalPairs - goodPairs;\n};\n\n"})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"\u89e3\u984c\u601d\u8def",children:"\u89e3\u984c\u601d\u8def"}),"\n",(0,r.jsxs)(n.p,{children:["Hint 1 \u5beb\u5230 ",(0,r.jsx)(n.code,{children:"Would it be easier to count the number of pairs that are not bad pairs?"})," \uff0c\u6240\u4ee5\u9019\u908a\u53ef\u4ee5\u6574\u7406\u51fa:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u5982\u679c nums[i] - i == nums[j] - j\uff0c(i, j) \u662f\u597d\u5c0d\u6578\uff08good pair\uff09\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u5982\u679c nums[i] - i \u2260 nums[j] - j\uff0c(i, j) \u662f\u58de\u5c0d\u6578\uff08bad pair\uff09\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u56e0\u6b64\u89e3\u6cd5\u53ef\u4ee5\u5229\u7528\u54c8\u5e0c\u8868\uff08Map\uff09\u8a08\u7b97\u300c\u597d\u5c0d\u6578\u300d\uff0c\u6700\u5f8c\u628a( \u7e3d\u5c0d\u6578 \u2212 \u597d\u5c0d\u6578 )\u5c31\u662f\u984c\u76ee\u9700\u8981\u7684\u58de\u5c0d\u6578\u4e86"}),"\n",(0,r.jsx)(n.p,{children:"\u7528\u4e00\u500b \u54c8\u5e0c\u8868\uff08Map\uff09 \u4f86\u8a18\u9304\u6bcf\u500b nums[i] - i \u7684\u51fa\u73fe\u6b21\u6578\uff0c\u5229\u7528 nums[i] - i \u4f5c\u70ba key\uff0c\u53ef\u4ee5\u5feb\u901f\u7d71\u8a08\u597d\u5c0d\u6578\uff08O(n)\uff09\u3002"}),"\n",(0,r.jsxs)(n.p,{children:["\u5b9a\u7fa9 diff \u662f \u6578\u5b57 nums[i] \u8207\u5b83\u7684\u7d22\u5f15 i \u4e4b\u9593\u7684\u5dee\u503c\n\u904d\u6b77 nums \u9663\u5217\uff0c\u5c0d\u65bc\u6bcf\u500b i\uff0c\u8a08\u7b97 diff = nums[i] - i\u3002",(0,r.jsx)(n.br,{}),"\n","\u5982\u679c diff \u5728 Map \u88e1\u51fa\u73fe\u904e\uff0c\u8868\u793a\u4e4b\u524d\u5df2\u7d93\u6709\u76f8\u540c diff\uff0c\u90a3\u9ebc\u9019\u4e9b diff \u53ef\u4ee5\u548c nums[i] \u914d\u5c0d\u5f62\u6210\u300c\u597d\u5c0d\u6578\u300d\u3002",(0,r.jsx)(n.br,{}),"\n","\u5c07 diff \u52a0\u5165 Map\uff0c\u4e26\u66f4\u65b0\u8a08\u6578\uff0c\u7528\u4f86\u8a08\u7b97\u672a\u4f86\u7684\u300c\u597d\u5c0d\u6578\u300d\u3002"]}),"\n",(0,r.jsx)(n.h2,{id:"\u5fc3\u5f97",children:"\u5fc3\u5f97"}),"\n",(0,r.jsxs)(n.p,{children:["\u539f\u672c\u60f3\u7528\u6642\u9593\u8907\u96dc\u5ea6 O(n\xb2) \u7684\u66b4\u529b\u89e3\u4f46\u6703\u8d85\u6642,\u770b\u4e86 Hint 3 \u7684",(0,r.jsx)(n.code,{children:"Keep a counter of nums[i] - i. To be efficient, use a HashMap."}),"\u4e4b\u5f8c\u4fbf\u6539\u7528\u73fe\u5728\u89e3\u6cd5"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},2693:(e,n,i)=>{i.d(n,{A:()=>s});i(6540);var a=i(7293),r=i(4848);const s=({difficulty:e,kyu:n})=>{let i=e;n&&(n>=5&&n<=8?i="Easy":n>=3&&n<=4?i="Medium":n>=1&&n<=2&&(i="Hard"));const s=i?{Easy:"tip",Medium:"warning",Hard:"danger"}[i]:"tip",t=i?n?`${n} kyu`:i:"";return(0,r.jsx)(a.A,{type:s,icon:null,title:t,children:(0,r.jsx)(r.Fragment,{})})}}}]);