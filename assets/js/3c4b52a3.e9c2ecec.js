"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6102],{7060:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>d,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"LeetCode/Longest Strictly Increasing or Strictly Decreasing Subarray/README","title":"3105. Longest Strictly Increasing or Strictly Decreasing Subarray","description":"You are given an array of integers nums. Return the length of the longest subarray of nums which is either strictly increasing or strictly decreasing .","source":"@site/docs/LeetCode/3105. Longest Strictly Increasing or Strictly Decreasing Subarray/README.mdx","sourceDirName":"LeetCode/3105. Longest Strictly Increasing or Strictly Decreasing Subarray","slug":"/LeetCode/Longest Strictly Increasing or Strictly Decreasing Subarray/","permalink":"/problem-solving/LeetCode/Longest Strictly Increasing or Strictly Decreasing Subarray/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Yen-Chun Lin","lastUpdatedAt":1759305873000,"frontMatter":{"title":"3105. Longest Strictly Increasing or Strictly Decreasing Subarray","description":"You are given an array of integers nums. Return the length of the longest subarray of nums which is either strictly increasing or strictly decreasing .","keywords":["LeetCode","3105. Longest Strictly Increasing or Strictly Decreasing Subarray","Easy","Array"]},"sidebar":"tutorialSidebar","previous":{"title":"3100. Water Bottles II","permalink":"/problem-solving/LeetCode/Water Bottles II/"},"next":{"title":"3151. Special Array I","permalink":"/problem-solving/LeetCode/Special Array I/"}}');var t=n(4848),i=n(8453),a=n(1470),l=n(9365),c=n(2693);const o={title:"3105. Longest Strictly Increasing or Strictly Decreasing Subarray",description:"You are given an array of integers nums. Return the length of the longest subarray of nums which is either strictly increasing or strictly decreasing .",keywords:["LeetCode","3105. Longest Strictly Increasing or Strictly Decreasing Subarray","Easy","Array"]},d="frontMatter.title",u={},h=[{value:"Description",id:"description",level:2},{value:"Example 1:",id:"example-1",level:4},{value:"Example 2:",id:"example-2",level:4},{value:"Example 3:",id:"example-3",level:4},{value:"Constraints:",id:"constraints",level:2},{value:"Solution",id:"solution",level:2},{value:"\u89e3\u984c\u601d\u8def",id:"\u89e3\u984c\u601d\u8def",level:2},{value:"\u5fc3\u5f97",id:"\u5fc3\u5f97",level:2}];function p(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"frontmattertitle",children:(0,t.jsx)(r.a,{href:"https://leetcode.com/problems/longest-strictly-increasing-or-strictly-decreasing-subarray",children:o.title})})}),"\n","\n",(0,t.jsx)(c.A,{difficulty:"Easy"}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsxs)(l.A,{value:"description",label:"\u984c\u76ee\u63cf\u8ff0",default:!0,children:[(0,t.jsx)(r.h2,{id:"description",children:"Description"}),(0,t.jsx)(r.p,{children:"You are given an array of integers nums. Return the length of the longest\nsubarray\nof nums which is either\nstrictly increasing\nor\nstrictly decreasing\n."}),(0,t.jsx)(r.h4,{id:"example-1",children:"Example 1:"}),(0,t.jsx)(r.p,{children:"Input: nums = [1,4,3,3,2]"}),(0,t.jsx)(r.p,{children:"Output: 2"}),(0,t.jsx)(r.p,{children:"Explanation:"}),(0,t.jsx)(r.p,{children:"The strictly increasing subarrays of nums are [1], [2], [3], [3], [4], and [1,4]."}),(0,t.jsx)(r.p,{children:"The strictly decreasing subarrays of nums are [1], [2], [3], [3], [4], [3,2], and [4,3]."}),(0,t.jsx)(r.p,{children:"Hence, we return 2."}),(0,t.jsx)(r.h4,{id:"example-2",children:"Example 2:"}),(0,t.jsx)(r.p,{children:"Input: nums = [3,3,3,3]"}),(0,t.jsx)(r.p,{children:"Output: 1"}),(0,t.jsx)(r.p,{children:"Explanation:"}),(0,t.jsx)(r.p,{children:"The strictly increasing subarrays of nums are [3], [3], [3], and [3]."}),(0,t.jsx)(r.p,{children:"The strictly decreasing subarrays of nums are [3], [3], [3], and [3]."}),(0,t.jsx)(r.p,{children:"Hence, we return 1."}),(0,t.jsx)(r.h4,{id:"example-3",children:"Example 3:"}),(0,t.jsx)(r.p,{children:"Input: nums = [3,2,1]"}),(0,t.jsx)(r.p,{children:"Output: 3"}),(0,t.jsx)(r.p,{children:"Explanation:"}),(0,t.jsx)(r.p,{children:"The strictly increasing subarrays of nums are [3], [2], and [1]."}),(0,t.jsx)(r.p,{children:"The strictly decreasing subarrays of nums are [3], [2], [1], [3,2], [2,1], and [3,2,1]."}),(0,t.jsx)(r.p,{children:"Hence, we return 3."}),(0,t.jsx)(r.h2,{id:"constraints",children:"Constraints:"}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"1 <= nums.length <= 50\n1 <= nums[i] <= 50\n"})})]}),(0,t.jsxs)(l.A,{value:"solution",label:"\u89e3\u7b54",children:[(0,t.jsx)(r.h2,{id:"solution",children:"Solution"}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestMonotonicSubarray = function (nums) {\n  let increase = 1;\n  let decrease = 1;\n  let maxLen = 1;\n\n  for (i = 1; i < nums.length; i++) {\n    if (nums[i] > nums[i - 1]) {\n      increase++;\n      decrease = 1;\n    } else if (nums[i] < nums[i - 1]) {\n      decrease++;\n      increase = 1;\n    } else {\n      increase = 1;\n      decrease = 1;\n    }\n    maxLen = Math.max(maxLen, increase, decrease);\n  }\n\n  return maxLen;\n};\n"})})]})]}),"\n",(0,t.jsx)(r.h2,{id:"\u89e3\u984c\u601d\u8def",children:"\u89e3\u984c\u601d\u8def"}),"\n",(0,t.jsx)(r.p,{children:"\u8981\u627e\u51fa\u9663\u5217\u4e2d\u6700\u9577\u7684\u56b4\u683c\u905e\u589e or \u905e\u6e1b\u9577\u5ea6\uff0c\u6240\u4ee5\u7528 maxLen \u8b8a\u6578\u4f86\u8a18\u4f4f\u3002\u89e3\u6cd5\u5c31\u66b4\u529b\u89e3\u5b9a\u7fa9 increase = 1 ; decrease = 1 \uff0c\u4e4b\u5f8c\u904d\u6b77\u9663\u5217\u6bd4\u8f03\u7b2c i \u500b\u548c i-1 \u500b\u8ab0\u5927\u8ab0\u5c0f\uff0c\u5982\u679c\u90fd\u4e00\u6a23\u7684\u8a71 increase\u3001decrease \u90fd\u91cd\u7f6e\u56de 1\u3002"}),"\n",(0,t.jsx)(r.h2,{id:"\u5fc3\u5f97",children:"\u5fc3\u5f97"}),"\n",(0,t.jsx)(r.p,{children:"\u984c\u76ee\u4e0d\u592a\u76f4\u89ba\uff0c\u5c31\u7b97\u89e3\u51fa\u4f86\u9084\u662f\u4e0d\u592a\u61c2\u70ba\u5565 Example 2 \u7684 [3,3,3,3] \u6703\u662f 1 \u4e0d\u662f 0 \uff0c\u8981...\u60e1\u88dc...\u8cc7\u6599\u7d50\u69cb...\u310c..."})]})}function y(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},2693:(e,r,n)=>{n.d(r,{A:()=>i});n(6540);var s=n(7293),t=n(4848);const i=({difficulty:e,kyu:r})=>{let n=e;r&&(r>=5&&r<=8?n="Easy":r>=3&&r<=4?n="Medium":r>=1&&r<=2&&(n="Hard"));const i=n?{Easy:"tip",Medium:"warning",Hard:"danger"}[n]:"tip",a=n?r?`${r} kyu`:n:"";return(0,t.jsx)(s.A,{type:i,icon:null,title:a,children:(0,t.jsx)(t.Fragment,{})})}}}]);