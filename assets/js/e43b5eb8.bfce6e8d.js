"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7647],{5806:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>g,default:()=>f,frontMatter:()=>x,metadata:()=>s,toc:()=>y});const s=JSON.parse('{"id":"LeetCode/Adjacent Increasing Subarrays Detection I/README","title":"3349. Adjacent Increasing Subarrays Detection I","description":"Given an array nums of n integers and an integer k, determine whether there exist two adjacent subarrays of length k such that both subarrays are strictly increasing. Specifically, check if there are two subarrays starting at indices a and b (a < b)","source":"@site/docs/LeetCode/3349. Adjacent Increasing Subarrays Detection I/README.mdx","sourceDirName":"LeetCode/3349. Adjacent Increasing Subarrays Detection I","slug":"/LeetCode/Adjacent Increasing Subarrays Detection I/","permalink":"/problem-solving/LeetCode/Adjacent Increasing Subarrays Detection I/","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"LeetCode","permalink":"/problem-solving/tags/leet-code"},{"inline":true,"label":"Easy","permalink":"/problem-solving/tags/easy"},{"inline":true,"label":"Array","permalink":"/problem-solving/tags/array"}],"version":"current","lastUpdatedBy":"Yen-Chun Lin","lastUpdatedAt":1760430514000,"frontMatter":{"title":"3349. Adjacent Increasing Subarrays Detection I","description":"Given an array nums of n integers and an integer k, determine whether there exist two adjacent subarrays of length k such that both subarrays are strictly increasing. Specifically, check if there are two subarrays starting at indices a and b (a < b)","keywords":["LeetCode","3349. Adjacent Increasing Subarrays Detection I","Easy","Array"],"tags":["LeetCode","Easy","Array"]},"sidebar":"tutorialSidebar","previous":{"title":"3151. Special Array I","permalink":"/problem-solving/LeetCode/Special Array I/"},"next":{"title":"3350. Adjacent Increasing Subarrays Detection II","permalink":"/problem-solving/LeetCode/Adjacent Increasing Subarrays Detection II/"}}');var t=r(4848),a=r(8453),i=r(1470),l=r(9365),c=r(3457),o=r(2693);const d="/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar hasIncreasingSubarrays = function (nums, k) {\n  const isIncreasing = (start) => {\n    for (let i = start; i < start + k - 1; i++) {\n      if (nums[i] >= nums[i + 1]) return false;\n    }\n    return true;\n  };\n\n  for (let i = 0; i + 2 * k <= nums.length; i++) {\n    if (isIncreasing(i) && isIncreasing(i + k)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n";function u(e){const n={li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Given an array nums of n integers and an integer k, determine whether there exist two adjacent subarrays of length k such that both subarrays are strictly increasing. Specifically, check if there are two subarrays starting at indices a and b (a < b), where:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Both subarrays nums[a..a + k - 1] and nums[b..b + k - 1] are strictly increasing."}),"\n",(0,t.jsx)(n.li,{children:"The subarrays must be adjacent, meaning b = a + k.\nReturn true if it is possible to find two such subarrays, and false otherwise."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}function j(e){const n={blockquote:"blockquote",br:"br",code:"code",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h4,{id:"example-1",children:"Example 1:"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Input:"})," nums = [2,5,7,8,9,2,3,4,3,1], k = 3",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Output:"})," true",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Explanation:"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The subarray starting at index 2 is [7, 8, 9], which is strictly increasing."}),"\n",(0,t.jsx)(n.li,{children:"The subarray starting at index 5 is [2, 3, 4], which is also strictly increasing."}),"\n",(0,t.jsx)(n.li,{children:"These two subarrays are adjacent, so the result is true."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-2",children:"Example 2:"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Input:"})," nums = [1,2,3,4,4,4,4,5,6,7], k = 5",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Output:"})," false"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"constraints",children:"Constraints:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"2 <= nums.length <= 100"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 < 2 \\* k <= nums.length"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"-1000 <= nums[i] <= 1000"})}),"\n"]})]})}function b(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(j,{...e})}):j(e)}const x={title:"3349. Adjacent Increasing Subarrays Detection I",description:"Given an array nums of n integers and an integer k, determine whether there exist two adjacent subarrays of length k such that both subarrays are strictly increasing. Specifically, check if there are two subarrays starting at indices a and b (a < b)",keywords:["LeetCode","3349. Adjacent Increasing Subarrays Detection I","Easy","Array"],tags:["LeetCode","Easy","Array"]},g="frontMatter.title",p={},y=[{value:"Example 1:",id:"example-1",level:4},{value:"Example 2:",id:"example-2",level:4},{value:"Constraints:",id:"constraints",level:4},{value:"Solution",id:"solution",level:2},{value:"\u89e3\u984c\u601d\u8def",id:"\u89e3\u984c\u601d\u8def",level:3},{value:"\u5fc3\u5f97",id:"\u5fc3\u5f97",level:3}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"frontmattertitle",children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/adjacent-increasing-subarrays-detection-i",children:x.title})})}),"\n","\n",(0,t.jsx)(o.A,{difficulty:"Easy"}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(l.A,{value:"description",label:"\u984c\u76ee\u63cf\u8ff0",default:!0,children:(0,t.jsxs)(r,{open:!0,children:[(0,t.jsx)("summary",{children:"Description"}),(0,t.jsx)(h,{}),(0,t.jsx)(b,{})]})}),(0,t.jsxs)(l.A,{value:"solution",label:"\u89e3\u7b54",children:[(0,t.jsx)(n.h2,{id:"solution",children:"Solution"}),(0,t.jsx)(c.A,{language:"js",children:d})]})]}),"\n",(0,t.jsx)(n.h3,{id:"\u89e3\u984c\u601d\u8def",children:"\u89e3\u984c\u601d\u8def"}),"\n",(0,t.jsx)(n.p,{children:"\u984c\u76ee\u8981\u627e\u51fa\u662f\u5426\u5b58\u5728\u7b26\u5408\u689d\u4ef6\u7684\u5169\u500b subarray\uff1a"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u5169\u500b subarray \u7684\u9577\u5ea6\u7686\u70ba ",(0,t.jsx)(n.code,{children:"k"})]}),"\n",(0,t.jsx)(n.li,{children:"\u5169\u500b subarray \u90fd\u662f strictly increasing"}),"\n",(0,t.jsx)(n.li,{children:"\u5169\u500b subarray \u8981\u76f8\u9130\uff0c\u4e2d\u9593\u4e0d\u80fd\u6709\u5176\u4ed6\u503c"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["\u9996\u5148\u5b9a\u7fa9\u4e00\u500b helper function ",(0,t.jsx)(n.code,{children:"isIncreasing"})," \uff0c\u5224\u65b7\u5169\u500b subarray \u662f\u5426\u90fd\u662f strictly increasing"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const isIncreasing = (start) => {\n  for (let i = start; i < start + k - 1; i++) {\n    if (nums[i] >= nums[i + 1]) return false;\n  }\n  return true;\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\u63a5\u8457\u4f7f\u7528 ",(0,t.jsx)(n.code,{children:"isIncreasing"})," \u4f86\u5224\u65b7\u662f\u5426\u5b58\u5728\u7b26\u5408\u689d\u4ef6\u7684\u5169\u500b subarray\uff0c\u5169\u8005\u90fd\u56b4\u683c\u905e\u589e\u5c31\u56de\u50b3 true\uff0c\u5426\u5247\u56de\u50b3 false"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"for (let i = 0; i + 2 * k <= nums.length; i++) {\n  // i + 2 * k \u662f\u56e0\u70ba\u6aa2\u67e5\u7684\u662f\u5169\u500b\u9577\u5ea6\u70ba k \u7684\u76f8\u9130 subarray\n  // <= nums.length \u662f\u56e0\u70ba\u6700\u5f8c\u4e00\u500b subarray \u7684\u7bc4\u570d\u4e0d\u80fd\u8d85\u904e\u9663\u5217\u9577\u5ea6\n  if (isIncreasing(i) && isIncreasing(i + k)) {\n    return true;\n  }\n}\nreturn false;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u5fc3\u5f97",children:"\u5fc3\u5f97"}),"\n",(0,t.jsx)(n.p,{children:"\u4f7f\u7528 helper function \u4f86\u7c21\u5316\u7d50\u69cb\u3002"})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},2693:(e,n,r)=>{r.d(n,{A:()=>a});r(6540);var s=r(7293),t=r(4848);const a=({difficulty:e,kyu:n})=>{let r=e;n&&(n>=5&&n<=8?r="Easy":n>=3&&n<=4?r="Medium":n>=1&&n<=2&&(r="Hard"));const a=r?{Easy:"tip",Medium:"warning",Hard:"danger"}[r]:"tip",i=r?n?`${n} kyu`:r:"";return(0,t.jsx)(s.A,{type:a,icon:null,title:i,children:(0,t.jsx)(t.Fragment,{})})}}}]);