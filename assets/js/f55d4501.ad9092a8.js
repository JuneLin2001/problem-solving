"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8575],{7979:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>j,contentTitle:()=>f,default:()=>v,frontMatter:()=>b,metadata:()=>a,toc:()=>x});const a=JSON.parse('{"id":"LeetCode/Count Number of Bad Pairs/README","title":"2364. Count Number of Bad Pairs","description":"You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i]. Return the total number of bad pairs in nums.","source":"@site/docs/LeetCode/2364. Count Number of Bad Pairs/README.mdx","sourceDirName":"LeetCode/2364. Count Number of Bad Pairs","slug":"/LeetCode/Count Number of Bad Pairs/","permalink":"/problem-solving/LeetCode/Count Number of Bad Pairs/","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"LeetCode","permalink":"/problem-solving/tags/leet-code"},{"inline":true,"label":"Medium","permalink":"/problem-solving/tags/medium"},{"inline":true,"label":"Array","permalink":"/problem-solving/tags/array"},{"inline":true,"label":"Hash Table","permalink":"/problem-solving/tags/hash-table"},{"inline":true,"label":"Math","permalink":"/problem-solving/tags/math"},{"inline":true,"label":"Counting","permalink":"/problem-solving/tags/counting"}],"version":"current","lastUpdatedBy":"Yen-Chun,Lin","lastUpdatedAt":1761237301000,"frontMatter":{"title":"2364. Count Number of Bad Pairs","description":"You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i]. Return the total number of bad pairs in nums.","keywords":["LeetCode","2364. Count Number of Bad Pairs","Medium","Array","Hash Table","Math","Counting"],"tags":["LeetCode","Medium","Array","Hash Table","Math","Counting"]},"sidebar":"tutorialSidebar","previous":{"title":"2300. Successful Pairs of Spells and Potions","permalink":"/problem-solving/LeetCode/Successful Pairs of Spells and Potions/"},"next":{"title":"2579. Count Total Number of Colored Cells","permalink":"/problem-solving/LeetCode/Count Total Number of Colored Cells/"}}');var t=r(4848),i=r(8453),s=r(1470),l=r(9365),o=r(3457),u=r(2693);const d="/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countBadPairs = function (nums) {\n  let arrLength = nums.length;\n  let goodPairs = 0;\n  let totalPairs = (arrLength * (arrLength - 1)) / 2;\n  let HashMap = new Map();\n\n  for (let i = 0; i < arrLength; i++) {\n    let diff = i - nums[i];\n    if (HashMap.has(diff)) {\n      goodPairs += HashMap.get(diff);\n      HashMap.set(diff, HashMap.get(diff) + 1);\n    } else {\n      HashMap.set(diff, 1);\n    }\n  }\n\n  return totalPairs - goodPairs;\n};\n";function c(e){const n={p:"p",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i]."}),"\n",(0,t.jsx)(n.p,{children:"Return the total number of bad pairs in nums."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}function h(e){const n={blockquote:"blockquote",br:"br",code:"code",h2:"h2",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h4,{id:"example-1",children:"Example 1:"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Input:"})," nums = [4,1,3,3]",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Output:"})," 5",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Explanation:"})," The pair (0, 1) is a bad pair since 1 - 0 != 1 - 4.",(0,t.jsx)(n.br,{}),"\n","The pair (0, 2) is a bad pair since 2 - 0 != 3 - 4, 2 != -1.",(0,t.jsx)(n.br,{}),"\n","The pair (0, 3) is a bad pair since 3 - 0 != 3 - 4, 3 != -1.",(0,t.jsx)(n.br,{}),"\n","The pair (1, 2) is a bad pair since 2 - 1 != 3 - 1, 1 != 2.",(0,t.jsx)(n.br,{}),"\n","The pair (2, 3) is a bad pair since 3 - 2 != 3 - 3, 1 != 0.",(0,t.jsx)(n.br,{}),"\n","There are a total of 5 bad pairs, so we return 5."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-2",children:"Example 2:"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Input:"})," nums = [1,2,3,4,5]",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Output:"})," 0",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Explanation:"})," There are no bad pairs."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"constraints",children:"Constraints:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"1 <= nums.length <= 105\n1 <= nums.length <= 105\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}const b={title:"2364. Count Number of Bad Pairs",description:"You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i]. Return the total number of bad pairs in nums.",keywords:["LeetCode","2364. Count Number of Bad Pairs","Medium","Array","Hash Table","Math","Counting"],tags:["LeetCode","Medium","Array","Hash Table","Math","Counting"]},f="frontMatter.title",j={},x=[{value:"Example 1:",id:"example-1",level:4},{value:"Example 2:",id:"example-2",level:4},{value:"Constraints:",id:"constraints",level:2},{value:"Solution",id:"solution",level:2},{value:"\u89e3\u984c\u601d\u8def",id:"\u89e3\u984c\u601d\u8def",level:2},{value:"\u5fc3\u5f97",id:"\u5fc3\u5f97",level:2}];function g(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"frontmattertitle",children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/count-number-of-bad-pairs/",children:b.title})})}),"\n","\n",(0,t.jsx)(u.A,{difficulty:"Medium"}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsx)(l.A,{value:"description",label:"\u984c\u76ee\u63cf\u8ff0",default:!0,children:(0,t.jsxs)(r,{open:!0,children:[(0,t.jsx)("summary",{children:"Description"}),(0,t.jsx)(p,{}),(0,t.jsx)(m,{})]})}),(0,t.jsxs)(l.A,{value:"solution",label:"\u89e3\u7b54",children:[(0,t.jsx)(n.h2,{id:"solution",children:"Solution"}),(0,t.jsx)(o.A,{language:"js",children:d})]})]}),"\n",(0,t.jsx)(n.h2,{id:"\u89e3\u984c\u601d\u8def",children:"\u89e3\u984c\u601d\u8def"}),"\n",(0,t.jsxs)(n.p,{children:["Hint 1 \u5beb\u5230 ",(0,t.jsx)(n.code,{children:"Would it be easier to count the number of pairs that are not bad pairs?"})," \uff0c\u6240\u4ee5\u9019\u908a\u53ef\u4ee5\u6574\u7406\u51fa:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u5982\u679c ",(0,t.jsx)(n.code,{children:"nums[i] - i == nums[j] - j"}),"\uff0c",(0,t.jsx)(n.code,{children:"(i, j)"})," \u662f\u597d\u5c0d\u6578\uff08good pair\uff09\u3002"]}),"\n",(0,t.jsxs)(n.li,{children:["\u5982\u679c ",(0,t.jsx)(n.code,{children:"nums[i] - i \u2260 nums[j] - j"}),"\uff0c",(0,t.jsx)(n.code,{children:"(i, j)"})," \u662f\u58de\u5c0d\u6578\uff08bad pair\uff09\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"\u56e0\u6b64\u89e3\u6cd5\u53ef\u4ee5\u5229\u7528 Hash Map \u8a08\u7b97\u300c\u597d\u5c0d\u6578\u300d\uff0c\u6700\u5f8c\u628a ( \u7e3d\u5c0d\u6578 \u2212 \u597d\u5c0d\u6578 ) \u5c31\u662f\u984c\u76ee\u9700\u8981\u7684\u58de\u5c0d\u6578\u4e86"}),"\n",(0,t.jsx)(n.p,{children:"\u7528\u4e00\u500b Hash Map \u4f86\u8a18\u9304\u6bcf\u500b nums[i] - i \u7684\u51fa\u73fe\u6b21\u6578\uff0c\u5229\u7528 nums[i] - i \u4f5c\u70ba key\uff0c\u53ef\u4ee5\u5feb\u901f\u7d71\u8a08\u597d\u5c0d\u6578\uff08O(n)\uff09\u3002"}),"\n",(0,t.jsxs)(n.p,{children:["\u5b9a\u7fa9 diff \u662f \u6578\u5b57 nums[i] \u8207\u5b83\u7684\u7d22\u5f15 i \u4e4b\u9593\u7684\u5dee\u503c\n\u904d\u6b77 nums \u9663\u5217\uff0c\u5c0d\u65bc\u6bcf\u500b i\uff0c\u8a08\u7b97 diff = nums[i] - i\u3002",(0,t.jsx)(n.br,{}),"\n","\u5982\u679c diff \u5728 Map \u88e1\u51fa\u73fe\u904e\uff0c\u8868\u793a\u4e4b\u524d\u5df2\u7d93\u6709\u76f8\u540c diff\uff0c\u90a3\u9ebc\u9019\u4e9b diff \u53ef\u4ee5\u548c nums[i] \u914d\u5c0d\u5f62\u6210\u300c\u597d\u5c0d\u6578\u300d\u3002",(0,t.jsx)(n.br,{}),"\n","\u5c07 diff \u52a0\u5165 Map\uff0c\u4e26\u66f4\u65b0\u8a08\u6578\uff0c\u7528\u4f86\u8a08\u7b97\u672a\u4f86\u7684\u300c\u597d\u5c0d\u6578\u300d\u3002"]}),"\n",(0,t.jsx)(n.h2,{id:"\u5fc3\u5f97",children:"\u5fc3\u5f97"}),"\n",(0,t.jsxs)(n.p,{children:["\u539f\u672c\u60f3\u7528\u6642\u9593\u8907\u96dc\u5ea6 O(n\xb2) \u7684\u66b4\u529b\u89e3\u4f46\u6703\u8d85\u6642",(0,t.jsx)(n.br,{}),"\n","\u770b\u4e86 Hint 3 \u7684",(0,t.jsx)(n.code,{children:"Keep a counter of nums[i] - i. To be efficient, use a HashMap."}),"\u4e4b\u5f8c\u4fbf\u6539\u7528\u73fe\u5728\u89e3\u6cd5"]})]})}function v(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},9365:(e,n,r)=>{r.d(n,{A:()=>s});r(6540);var a=r(4164);const t={tabItem:"tabItem_Ymn6"};var i=r(4848);function s({children:e,hidden:n,className:r}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(t.tabItem,r),hidden:n,children:e})}},1470:(e,n,r)=>{r.d(n,{A:()=>k});var a=r(6540),t=r(4164),i=r(7559),s=r(3104),l=r(6347),o=r(205),u=r(7485),d=r(1682),c=r(679);function p(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return p(e).map((({props:{value:e,label:n,attributes:r,default:a}})=>({value:e,label:n,attributes:r,default:a})))}(r);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function m({value:e,tabValues:n}){return n.some((n=>n.value===e))}function b({queryString:e=!1,groupId:n}){const r=(0,l.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,u.aZ)(t),(0,a.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(r.location.search);n.set(t,e),r.replace({...r.location,search:n.toString()})}),[t,r])]}function f(e){const{defaultValue:n,queryString:r=!1,groupId:t}=e,i=h(e),[s,l]=(0,a.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i}))),[u,d]=b({queryString:r,groupId:t}),[p,f]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,t]=(0,c.Dv)(n);return[r,(0,a.useCallback)((e=>{n&&t.set(e)}),[n,t])]}({groupId:t}),j=(()=>{const e=u??p;return m({value:e,tabValues:i})?e:null})();(0,o.A)((()=>{j&&l(j)}),[j]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),f(e)}),[d,f,i]),tabValues:i}}var j=r(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=r(4848);function v({className:e,block:n,selectedValue:r,selectValue:a,tabValues:i}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,s.a_)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),s=i[t].value;s!==r&&(o(n),a(s))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;n=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;n=l[r]??l[l.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:i.map((({value:e,label:n,attributes:a})=>(0,g.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{l.push(e)},onKeyDown:d,onClick:u,...a,className:(0,t.A)("tabs__item",x.tabItem,a?.className,{"tabs__item--active":r===e}),children:n??e},e)))})}function y({lazy:e,children:n,selectedValue:r}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function C(e){const n=f(e);return(0,g.jsxs)("div",{className:(0,t.A)(i.G.tabs.container,"tabs-container",x.tabList),children:[(0,g.jsx)(v,{...n,...e}),(0,g.jsx)(y,{...n,...e})]})}function k(e){const n=(0,j.A)();return(0,g.jsx)(C,{...e,children:p(e.children)},String(n))}},2693:(e,n,r)=>{r.d(n,{A:()=>i});r(6540);var a=r(7293),t=r(4848);const i=({difficulty:e,kyu:n})=>{let r=e;n&&(n>=5&&n<=8?r="Easy":n>=3&&n<=4?r="Medium":n>=1&&n<=2&&(r="Hard"));const i=r?{Easy:"tip",Medium:"warning",Hard:"danger"}[r]:"tip",s=r?n?`${n} kyu`:r:"";return(0,t.jsx)(a.A,{type:i,icon:null,title:s,children:(0,t.jsx)(t.Fragment,{})})}}}]);